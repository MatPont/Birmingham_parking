library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(aricode)
library(MixSim)
# 1
library(mvtnorm)
x.points <- seq(-3,3,length.out=100)
y.points <- x.points
z <- matrix(0,nrow=100,ncol=100)
mu <- c(1,1)
sigma <- matrix(c(1,1,1,5),nrow=2)
for (i in 1:100) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i],y.points[j]),
mean=mu,sigma=sigma)
}
}
contour(x.points,y.points,z)
make_dataset <- function(n , Pi, Mu, S, svg_file_name, X_file_name, y_file_name){
jeu_1 <- simdataset(n = n, Pi = Pi, Mu = Mu, S = S)
svg(svg_file_name)
plot(jeu_1$X, col = jeu_1$id, pch=19)
dev.off()
write.csv(jeu_1$X, X_file_name)
write.csv(jeu_1$id, y_file_name)
}
independant_var_egal <- function(S){
t <- S[1]
for(i in 1:dim(S)[3]){
S[,,i] <- 0
diag(S[,,i]) <- t
}
print(S)
return(S)
}
same_covariance <- function(S){
for(i in 2:dim(S)[3]){
S[,,i] <- S[,,1]
}
print(S)
return(S)
}
# Jeu 1 (2 classes [500x2] spheriques)
set.seed(77)
Q <- MixSim(BarOmega = 0, K = 2, p = 2, sph = TRUE)
make_dataset(500, Q$Pi, Q$Mu, Q$S, "jeu1_1.svg", "jeu1_1.csv", "jeu1_1_label.csv")
jeu1_1_X <- read.csv("jeu1_1.csv", row.names = 1)
jeu1_1_label <- as.factor(unlist(read.csv("jeu1_1_label.csv", row.names = 1)))
plot(jeu1_1_X, col = jeu1_1_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, independant_var_egal(Q$S), "jeu1_2.svg", "jeu1_2.csv", "jeu1_2_label.csv")
jeu1_2_X <- read.csv("jeu1_2.csv", row.names = 1)
jeu1_2_label <- as.factor(unlist(read.csv("jeu1_2_label.csv", row.names = 1)))
plot(jeu1_2_X, col = jeu1_2_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, same_covariance(Q$S), "jeu1_3.svg", "jeu1_3.csv", "jeu1_3_label.csv")
jeu1_3_X <- read.csv("jeu1_3.csv", row.names = 1)
jeu1_3_label <- as.factor(unlist(read.csv("jeu1_3_label.csv", row.names = 1)))
plot(jeu1_3_X, col = jeu1_3_label, pch=19)
# Jeu 2
set.seed(77)
Q <- MixSim(BarOmega = 0.2, K = 3, p = 2, sph = TRUE)
make_dataset(500, Q$Pi, Q$Mu, Q$S, "jeu2_1.svg", "jeu2_1.csv", "jeu2_1_label.csv")
jeu2_1_X <- read.csv("jeu2_1.csv", row.names = 1)
jeu2_1_label <- as.factor(unlist(read.csv("jeu2_1_label.csv", row.names = 1)))
plot(jeu2_1_X, col = jeu2_1_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, independant_var_egal(Q$S), "jeu2_2.svg", "jeu2_2.csv", "jeu2_2_label.csv")
jeu2_2_X <- read.csv("jeu2_2.csv", row.names = 1)
jeu2_2_label <- as.factor(unlist(read.csv("jeu2_2_label.csv", row.names = 1)))
plot(jeu2_2_X, col = jeu2_2_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, same_covariance(Q$S), "jeu2_3.svg", "jeu2_3.csv", "jeu2_3_label.csv")
jeu2_3_X <- read.csv("jeu2_3.csv", row.names = 1)
jeu2_3_label <- as.factor(unlist(read.csv("jeu2_3_label.csv", row.names = 1)))
plot(jeu2_3_X, col = jeu2_3_label, pch=19)
# Jeu 3
set.seed(777)
Q <- MixSim(BarOmega = 0.2, K = 3, p = 2, sph = FALSE)
Q$Mu
make_dataset(500, Q$Pi, Q$Mu, Q$S, "jeu3_1.svg", "jeu3_1.csv", "jeu3_1_label.csv")
jeu3_1_X <- read.csv("jeu3_1.csv", row.names = 1)
jeu3_1_label <- as.factor(unlist(read.csv("jeu3_1_label.csv", row.names = 1)))
plot(jeu3_1_X, col = jeu3_1_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, independant_var_egal(Q$S), "jeu3_2.svg", "jeu3_2.csv", "jeu3_2_label.csv")
jeu3_2_X <- read.csv("jeu3_2.csv", row.names = 1)
jeu3_2_label <- as.factor(unlist(read.csv("jeu3_2_label.csv", row.names = 1)))
plot(jeu3_2_X, col = jeu3_2_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, same_covariance(Q$S), "jeu3_3.svg", "jeu3_3.csv", "jeu3_3_label.csv")
jeu3_3_X <- read.csv("jeu3_3.csv", row.names = 1)
jeu3_3_label <- as.factor(unlist(read.csv("jeu3_3_label.csv", row.names = 1)))
plot(jeu3_3_X, col = jeu3_3_label, pch=19)
Q$Mu
Q$S
# Jeu 3
set.seed(777)
Q <- MixSim(BarOmega = 0.2, K = 3, p = 2, sph = FALSE)
make_dataset(500, Q$Pi, Q$Mu, Q$S, "jeu3_1.svg", "jeu3_1.csv", "jeu3_1_label.csv")
jeu3_1_X <- read.csv("jeu3_1.csv", row.names = 1)
jeu3_1_label <- as.factor(unlist(read.csv("jeu3_1_label.csv", row.names = 1)))
plot(jeu3_1_X, col = jeu3_1_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, independant_var_egal(Q$S), "jeu3_2.svg", "jeu3_2.csv", "jeu3_2_label.csv")
jeu3_2_X <- read.csv("jeu3_2.csv", row.names = 1)
jeu3_2_label <- as.factor(unlist(read.csv("jeu3_2_label.csv", row.names = 1)))
plot(jeu3_2_X, col = jeu3_2_label, pch=19)
make_dataset(500, Q$Pi, Q$Mu, same_covariance(Q$S), "jeu3_3.svg", "jeu3_3.csv", "jeu3_3_label.csv")
jeu3_3_X <- read.csv("jeu3_3.csv", row.names = 1)
jeu3_3_label <- as.factor(unlist(read.csv("jeu3_3_label.csv", row.names = 1)))
plot(jeu3_3_X, col = jeu3_3_label, pch=19)
# ======= Partie 2 =======
# 1
discriminant_function <- function(x, mu_i, sigma, p_c_i){
x_minus_mu_i <- t(x - mu_i)
return( - 1/2 * t(x_minus_mu_i) %*% solve(sigma) %*% x_minus_mu_i - 1/2 * log(det(sigma)) + log(p_c_i) )
}
discriminant_function_independant_var_egal <- function(x, mu_i, sigma, p_c_i){
x_minus_mu_i <- t(x - mu_i)
return( - 1/(2 * sigma**2) * x_minus_mu_i %*% t(x_minus_mu_i) + log(p_c_i) )
}
discriminant_function_same_covariance <- function(x, mu_i, sigma, p_c_i){
x_minus_mu_i <- t(x - mu_i)
return( - 1/2 * t(x_minus_mu_i) %*% solve(sigma) %*% x_minus_mu_i + log(p_c_i) )
}
process_dataset <- function(X, y, out_pred){
p_c_i <- c()
mu_i <- c()
for(y_i in unique(y)){
idx <- (y == y_i)
p_c_i[y_i] <- sum(idx) / length(y)
}
correct <- 0
correct_2 <- 0
correct_3 <- 0
pred_y <- c()
#pred_y_2 <- c()
#pred_y_3 <- c()
for(i in 1:dim(X)[1]){
x <- X[i,]
label <- y[i]
g_i <- c()
#g_i_2 <- c()
#g_i_3 <- c()
for(y_i in unique(y)){
idx <- (y == y_i)
g_i[y_i] <- discriminant_function(x, colMeans(X[idx,]), cov(X[idx,]), p_c_i[y_i])
#g_i_2[y_i] <- discriminant_function_independant_var_egal(x, colMeans(X[idx,]), p_c_i[y_i])
#g_i_3[y_i] <- discriminant_function_same_covariance(x, colMeans(X[idx,]), cov(X), p_c_i[y_i])
}
class <- which.max(g_i)
#class_2 <- which.max(g_i_2)
#class_3 <- which.max(g_i_3)
pred_y <- c(pred_y, class)
#pred_y_2 <- c(pred_y_2, class_2)
#pred_y_3 <- c(pred_y_3, class_3)
if(class == label)
correct <- correct + 1
# if(class_2 == label)
#   correct_2 <- correct_2 + 1
# if(class_3 == label)
#   correct_3 <- correct_3 + 1
}
print("1")
print(correct/length(y))
print(NMI(pred_y, y))
print(ARI(pred_y, y))
write.csv(pred_y, paste(out_pred,"_pred_1.csv", sep = ""))
# print("2")
# print(correct_2/length(y))
# print(NMI(pred_y_2, y))
# print(ARI(pred_y_2, y))
# write.csv(pred_y, paste(out_pred,"_pred_2.csv", sep = ""))
#
# print("3")
# print(correct_3/length(y))
# print(NMI(pred_y_3, y))
# print(ARI(pred_y_3, y))
# write.csv(pred_y, paste(out_pred,"_pred_3.csv", sep = ""))
}
process_dataset(jeu1_1_X, jeu1_1_label, "jeu1_1")
process_dataset(jeu1_2_X, jeu1_2_label, "jeu1_2")
process_dataset(jeu1_3_X, jeu1_3_label, "jeu1_3")
process_dataset(jeu2_1_X, jeu2_1_label, "jeu2_1")
process_dataset(jeu2_2_X, jeu2_2_label, "jeu2_2")
process_dataset(jeu2_3_X, jeu2_3_label, "jeu2_3")
process_dataset(jeu3_1_X, jeu3_1_label, "jeu3_1")
process_dataset(jeu3_2_X, jeu3_2_label, "jeu3_2")
process_dataset(jeu3_3_X, jeu3_3_label, "jeu3_3")
jeu3_3_X
cov(jeu3_3_X)
cov(jeu3_3_X[jeu3_3_label == 1,])
cov(jeu3_2_X[jeu3_2_label == 1,])
?simdataset
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
source("util.R")
source("data_cleaning.R")
plot_charge <- function(x, cluster){
label <- unique(cluster)
plot(colMeans(x[cluster == label[1],]), type='l', col=1, lty=1, ylim = c(0,1))
for(i in 2:length(label)){
lines(colMeans(x[cluster == label[i],]), type='l', col=i, lty=i, ylim = c(0,1))
}
legend("topleft",legend=1:length(label), lty=length(label), col=1:length(label))
}
week_data <- make_week_dataset(data)
week_label <- make_week_label(data)
norm_week_data <- norm_dataset(week_data)
library(NbClust)
x_._j <- 3
x_._j
norm_chi_2 <- function(data){
temp <- data
row_sum <- apply(data, MARGIN=1, FUN=sum)
col_sum <- apply(data, MARGIN=2, FUN=sum)
for(i in 1:dim(data)[1])
for(j in 1:dim(data)[2])
temp[i,j] <- data[i,j] / (sqrt(col_sum[j])*row_sum[i])
return(temp)
}
norm_week_data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
week_data <- make_week_dataset(data)
week_label <- make_week_label(data)
norm_week_data <- norm_dataset(week_data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
week_data <- make_week_dataset(data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
norm_day_data <- norm_dataset(day_data)
norm_park_data <- norm_dataset(park_data)
norm_chi_2(norm_week_data)
dim(norm_chi_2(norm_week_data))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
norm_day_data <- norm_dataset(day_data)
norm_park_data <- norm_dataset(park_data)
chi_week_data <- norm_chi_2(norm_week_data)
chi_day_data <- norm_chi_2(norm_day_data)
chi_park_data <- norm_chi_2(norm_park_data)
NbClust(chi_week_data)
NbClust(chi_week_data, method = "kmeans")
sum(is.na(chi_week_data))
sum(is.null(chi_week_data))
sum(chi_week_data == 0)
?NbClust
NbClust(chi_week_data, method = "centroid")
sum(norm_week_data == 0)
sum(week_data == 0)
withinss <- c()
for(i in 2:10){
print(i)
# res_spec <- specc(norm_week_data, i, nstart=50)
# withinss <- c(withinss, sum(withinss(res_spec)))
res_kmeans <- kmeans(chi_week_data, i, nstart = 50)
withinss <- c(withinss, res_kmeans$tot.withinss)
}
plot(withinss, type='b')
withinss <- c()
for(i in 2:10){
print(i)
# res_spec <- specc(norm_week_data, i, nstart=50)
# withinss <- c(withinss, sum(withinss(res_spec)))
res_kmeans <- kmeans(chi_week_data, i, nstart = 100)
withinss <- c(withinss, res_kmeans$tot.withinss)
}
plot(withinss, type='b')
withinss <- c()
for(i in 2:10){
print(i)
# res_spec <- specc(norm_week_data, i, nstart=50)
# withinss <- c(withinss, sum(withinss(res_spec)))
res_kmeans <- kmeans(chi_week_data, i, nstart = 100)
withinss <- c(withinss, res_kmeans$tot.withinss)
}
plot(withinss, type='b')
res_kmeans <- kmeans(chi_week_data, 4, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
res_kmeans <- kmeans(chi_week_data, 2, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
res_kmeans <- kmeans(chi_week_data, 3, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
clus.dwt = KMedoids(data=chi_week_data, k=3, "fourier")
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "fourier")
plot_charge(chi_week_data, clus.dwt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
withinss <- c()
for(i in 2:10){
print(i)
# res_spec <- specc(norm_week_data, i, nstart=50)
# withinss <- c(withinss, sum(withinss(res_spec)))
res_kmeans <- kmeans(chi_week_data, i, nstart = 100)
withinss <- c(withinss, res_kmeans$tot.withinss)
}
plot(withinss, type='b')
res_kmeans <- kmeans(chi_week_data, 3, nstart = 50)
plot_charge(chi_week_data, res_kmeans$cluster)
plot_charge(week_data, res_kmeans$cluster)
plot_charge(norm_week_data, res_kmeans$cluster)
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "wav")
plot_charge(norm_week_data, clus.dwt)
clus.dwt = pam(diss(chi_week_data, "DWT"), k=3)
plot_charge(norm_week_data, clus.dwt)
clus.dwt
clus.dwt = pam(diss(chi_week_data, "DWT"), k=3)$clustering
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "wav")
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "fourier")
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "wav")
plot_charge(norm_week_data, clus.dwt)
clus.dwt = KMedoids(data=chi_week_data, k=3, "fourier")
plot_charge(norm_week_data, clus.dwt)
res_kmeans <- kmeans(chi_week_data, 3, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
res_kmeans <- kmeans(chi_week_data, 4, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
res_kmeans <- kmeans(chi_week_data, 3, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
res_kmeans <- kmeans(chi_week_data, 2, nstart = 50)
plot_charge(norm_week_data, res_kmeans$cluster)
