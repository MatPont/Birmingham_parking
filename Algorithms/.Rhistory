library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.table("../Datasets/dataset.csv", sep=",")
data
data[,1]
unique(data[,1])
dim(data[,1])
length(data[,1])
25718/31
35718/31
head(data)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
dim(data)
length(unique(data[,1]))
35717/30
for(i in unique(data[,1])){ print(sum(data[,1] == i))}
boxplot(data)
is.na(data)
sum(is.na(data))
data[,2] > data[,3]
length(data[,2] < data[,3])
sum(data[,2] < data[,3])
data[data[,2] < data[,3]]
data[data[,2] < data[,3],]
sum(data[,2] < data[,3])
head(data)
unique(data[,1])
boxplot(data[,2:4])
?apply
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ if(x[2] < x[3]) x[3] = x[2]})
sum(data[,2] < data[,3])
dim(data)
length(data)
head(data)
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x) })
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x) })
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x[2]) })
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x[2]) })
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(as.numeric(x[2])) })
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data[,2:3] <- as.numeric(data[,2:3])
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data[,2] <- as.numeric(data[,2])
head(data)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data[,2] <- as.numeric(data[,2])
data[,3] <- as.numeric(data[,3])
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x[2]) })
data <- as.numeric(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
data <- as.numeric(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
data
head(data)
dim(data)
data[,2] <- as.numeric(data[,2])
data[,3] <- as.numeric(data[,3])
head(data)
# Manage outliers
data <- apply(data, MARGIN = 1, FUN = function(x){ print(x[2]) })
typeof(data[,2])
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
typeof(data[,2])
typeof(as.numeric(data[,2]))
data[,2] <- as.numeric(data[,2])
typeof(data[,2])
data[,2] <- as.factor(data[,2])
head(data)
typeof(data[,2])
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
data[,2:3] <- sapply(data[,2:3], as.factor)
head(data)
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
head(data)
data[,2:3] <- sapply(data[,2:3], as.numeric)
head(data)
typeof(data[,2])
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
typeof(data[,2])
typeof(as.numeric(data[,2]))
# Manage outliers
data[data[,2] < data[,3]]
# Manage outliers
dim(data[data[,2] < data[,3]])
# Manage outliers
length(data[data[,2] < data[,3]])
# Manage outliers
length(data[data[,2] < data[,3],])
# Manage outliers
dim(data[data[,2] < data[,3],])
# Manage outliers
data[data[,2] < data[,3],] = data[,2]
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
# Descriptive analysis
boxplot(data[,2:4])
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- as.matrix(read.table("../Datasets/dataset.csv", sep=",", header = TRUE))
# Descriptive analysis
boxplot(data[,2:4])
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Descriptive analysis
boxplot(data[,2:4])
# Check if, for some sample, occupancy is higher than capacity (error)
sum(data[,2] < data[,3])
# Manage outliers
data[data[,2] < data[,3],3] = data[data[,2] < data[,3],2]
sum(data[,2] < data[,3])
# Descriptive analysis after outliers management
boxplot(data[,2:4])
summary(data)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
summary(data)
sum(data[,3] < 0)
# Check if, for some sample, occupancy is higher than capacity (error)
sum(data[,2] < data[,3])
sum(data[,3] < 0)
# Manage outliers
data[data[,2] < data[,3],3] <- data[data[,2] < data[,3],2]
sum(data[,2] < data[,3])
# Descriptive analysis after outliers management
summary(data)
rep(2,5)
data[data[,3] < 0 ,3] <- rep(0, data[,3] < 0)
data[data[,3] < 0 ,3] <- rep(0, sum(data[,3] < 0))
sum(data[,3] < 0)
# Descriptive analysis after outliers management
summary(data)
dim(is.na(data))
sum(is.na(data))
sum(is.null(data))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Descriptive analysis
boxplot(data[, 2:4])
summary(data)
# Check outliers
sum(data[, 2] < data[, 3])
sum(data[, 3] < 0)
# Manage outliers
data[data[, 2] < data[, 3], 3] <- data[data[, 2] < data[,3], 2]
data[data[, 3] < 0 ,3] <- rep(0, sum(data[, 3] < 0))
sum(data[, 2] < data[, 3])
sum(data[, 3] < 0)
# Descriptive analysis after outliers management
summary(data)
tail(data)
is.na(data[,2])
sum(is.na(data[,2]))
sum(is.na(data[,3]))
sum(data[,3] < 0)
for(i in data){print(i)}
for(i in data[,2]){print(i)}
for(i in data[,3]){print(i)}
for(i in data[,4]){print(i)}
for(i in data[,1]){print(i)}
pairs(data)
