library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
data[, 2] < data[, 3]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data[, 2] < data[, 3]
for(i in unique(data[,1])){
print(sum(data[,1] == i))
}
for(i in unique(data[,1])){
print(i,sum(data[,1] == i))
}
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
}
data[data[, 1] == "BHMBCCMKT01", 4]
data[,1]
data[data[, 1] == "BHMBCCMKT01", 4]
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
}
for(i in data[data[, 1] == "BHMBCCMKT01", 4]) { print(i) }
for(i in unique(data[data[, 1] == "BHMBCCMKT01", 4])) { print(sum(data[data[, 1] == "BHMBCCMKT01", 4] == i)) }
data[data[, 1] == "BHMBCCMKT01", 4][,1!10]
data[data[, 1] == "BHMBCCMKT01", 4][,1:10]
data[data[, 1] == "BHMBCCMKT01", 4]
temp <- apply(data[data[, 1] == "BHMBCCMKT01", 4], FUN = function(x){strsplit(x, " "), MARGIN = 2}
temp <- apply(data[data[, 1] == "BHMBCCMKT01", 4], FUN = function(x){strsplit(x, " ")}, MARGIN = 2)
dim(data[data[, 1] == "BHMBCCMKT01", 4])
length(data[data[, 1] == "BHMBCCMKT01", 4])
temp <- sapply(data[data[, 1] == "BHMBCCMKT01", 4], FUN = function(x){strsplit(x, " ")})
typeof(data[data[, 1] == "BHMBCCMKT01", 4])
data[data[, 1] == "BHMBCCMKT01", 4][1]
typeof(data[data[, 1] == "BHMBCCMKT01", 4][1])
data[data[, 1] == "BHMBCCMKT01", 4][1][1]
as.character(data[data[, 1] == "BHMBCCMKT01", 4])
typeof(as.character(data[data[, 1] == "BHMBCCMKT01", 4]))
temp <- sapply(as.characterdata[data[, 1] == "BHMBCCMKT01", 4]), FUN = function(x){strsplit(x, " ")})
temp <- sapply(as.character(data[data[, 1] == "BHMBCCMKT01", 4]), FUN = function(x){strsplit(x, " ")})
temp
temp[1]
temp[,1]
temp[1][1]
temp[1][1][1]
temp[1,1]
length(temp[1])
strsplit("oui non", " ")
strsplit("oui non", " ")[1]
typeof(strsplit("oui non", " "))
unlist(strsplit("oui non", " "))[1]
temp <- sapply(as.character(data[data[, 1] == "BHMBCCMKT01", 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
temp
head(temp)
temp[1]
sum(temp[temp == temp[1]])
typeof(temp[1])
temp[1]
temp == "2016-10-04""
temp == "2016-10-04"
sum(temp == "2016-10-04")
sum(temp == "2016-10-05")
(
for(i in unique(temp)){
print(i)
print(sum(temp == i))
}
for(i in unique(data[,1])){
print(i)
temp <- sapply(as.character(data[data[, 1] == i, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
for(j in unique(temp)){
print(j)
print(sum(temp == j))
}
}
for(i in unique(data[,1])){
print(i)
temp <- sapply(as.character(data[data[, 1] == i, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
for(j in unique(temp)){
print(j)
print(sum(temp == j))
}
readline(prompt="Press [enter] to continue")
}
for(i in unique(data[,1])){
print(i)
temp <- sapply(as.character(data[data[, 1] == i, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
for(j in unique(temp)){
if(sum(temp == j) != 18){
print(j)
print(sum(temp == j))
}
}
readline(prompt="Press [enter] to continue")
}
# Count number of lines for each parking
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
}
unique(data[,1])
dim(data)
# Check if all days have 18 measures
for(i in unique(data[,1])){
print(i)
# Remove hours from time
temp <- sapply(as.character(data[data[, 1] == i, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
for(j in unique(temp)){
if(sum(temp == j) != 18){
print(j)
print(sum(temp == j))
}else{
print(j)
print("_")
}
}
readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(i in unique(data[,1])){
print(i)
# Remove hours from time
temp <- sapply(as.character(data[data[, 1] == i, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(temp))
readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(parking in unique(data[,1])){
print(parking)
# Remove hours from time
days <- sapply(as.character(data[data[, 1] == parking, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(days))
for(day in unique(days)){
if(sum(days == day) != 18){
print(day)
print(sum(days == day))
}else{
print(day)
print("_")
}
}
readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(parking in unique(data[,1])){
print(parking)
# Remove hours from time
days <- sapply(as.character(data[data[, 1] == parking, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(days))
for(day in unique(days)){
if(sum(days == day) != 18){
print(day)
print(sum(days == day))
}
}
#readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(parking in unique(data[,1])){
print("=======")
print(parking)
# Remove hours from time
days <- sapply(as.character(data[data[, 1] == parking, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(days))
for(day in unique(days)){
if(sum(days == day) != 18){
print(day)
print(sum(days == day))
}
}
#readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(parking in unique(data[,1])){
print("=======")
print(parking)
# Remove hours from time
days <- sapply(as.character(data[data[, 1] == parking, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(days))
for(day in unique(days)){
if(sum(days == day) != 18){
print(day)
print(sum(days == day))
}
}
if(length(days) < 200){
for(day in unique(days)){
print(day)
print(sum(days == day))
}
}
#readline(prompt="Press [enter] to continue")
}
# Check if all days have 18 measures
for(parking in unique(data[,1])){
print("=======")
print(parking)
# Remove hours from time
days <- sapply(as.character(data[data[, 1] == parking, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1]})
print(length(days))
if(length(days) < 1300){
for(day in unique(days)){
print(day)
print(sum(days == day))
}
}else{
for(day in unique(days)){
if(sum(days == day) != 18){
print(day)
print(sum(days == day))
}
}
}
#readline(prompt="Press [enter] to continue")
}
