next
}
# If different days
if(current_day != next_row_day) {
# Add rows to current day if the measure it's not the last one (16h30)
if( ! (data[idx, 5]$hour == 16 & data[idx, 5]$min == 30)){
# Make fictitious date at 17h to fill the gap
temp <- data[idx, ]
diff <- (17 - data[idx, 5]$hour)*60 - data[idx, 5]$min
temp[5] = as.character(ymd_hms(data[idx, 5]) + (diff*60))
newdf <- add_multiple_rows(data[idx, ], temp, newdf)
}
# Add rows to new day if the measure it's not the first one (8h)
if( ! (data[idx+1, 5]$hour == 8 & data[idx+1, 5]$min == 0)){
# Make fictitious date at 7h30 to fill the gap
temp <- data[idx+1, ]
diff <- (7 - data[idx+1, 5]$hour)*60 + (30 - data[idx+1, 5]$min)
temp[5] = as.character(ymd_hms(data[idx+1, 5]) + (diff*60))
newdf <- add_multiple_rows(temp, data[idx+1, ], newdf)
}
next
}
}
}
newdf <- newdf[-1, ]
return(newdf)
}
# Fill missing days
get_missing_days <- function(data){
alldays <- as.character(seq(as.Date("2016-10-04"), as.Date("2016-12-19"), by="days"))
newdf <- rbind(data[1, ])
for(parking in unique(data[,1])){
# Remove hours from time
data_parking <- data[data[, 1] == parking, ]
measures <- sapply(as.character(data_parking[, 4]), FUN = function(x){ unlist(strsplit(x, " "))[1] })
days <- unique(measures)
missing_days <- setdiff(alldays, days)
for(day in missing_days){
temp <- data_parking[1, ]
temp[3] <- NA
temp_date <- as.POSIXlt(paste(day, "07:30:00"))
wday <- temp_date$wday
for(i in 1:18){
new_date <- as.character(ymd_hms(temp_date) + (i*30*60))
temp[5] <- new_date
temp[4] <- temp[5]
temp[3] <- as.integer(mean(as.integer(data_parking[data_parking[, 5]$wday == wday &
data_parking[, 5]$hour == as.POSIXlt(new_date)$hour &
data_parking[, 5]$min == as.POSIXlt(new_date)$min, 3])))
newdf <- rbind(newdf, temp)
}
}
}
newdf <- newdf[-1, ]
return(newdf)
}
# Full data cleaning pipeline
data_cleaning <- function(data){
data <- sort_dataframe(data)
# Remove parking with too few samples
print("Remove parking with too few samples...")
data <- data[data[,1] != "BHMBRTARC01", ]
data <- data[data[,1] != "NIA North", ]
# Remove duplicates
print("Remove duplicates...")
data <- unique(data)
# Round dates
print("Round dates...")
data$LastUpdated <- as.POSIXlt(data$LastUpdated, tz = "Europe/Amsterdam")
data$LastUpdated_rounded <- round_date(data$LastUpdated,'30 minute')
# Manage duplicates after round
print("Manage duplicates after round...")
data <- remove_dates_close(data)
# Manage 7h30 measures
print("Manage 7h30 measures...")
data <- fix_first_measure_of_day(data)
# Manage capacity < occupancy and occupancy < 0
print("Manage capacity < occupancy and occupancy < 0...")
data[data[, 2] < data[, 3], 3] <- data[data[, 2] < data[,3], 2]
data[data[, 3] < 0 ,3] <- rep(0, sum(data[, 3] < 0))
# Add missing values
print("Add missing values...")
temp <- get_missing_values(data)
data <- rbind(data, temp)
# Add missing days
print("Add missing days...")
temp <- get_missing_days(data)
data <- rbind(data, temp)
# Rename rownames
print("Rename rownames...")
data <- sort_dataframe(data)
rownames(data) <- 1:dim(data)[1]
data[,3] <- as.integer(data[,3])
return(data)
}
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
dim(data)
write.csv("cleaned_dataset.csv")
getwd()
write.csv("cleaned_dataset.csv", data)
typeof(data)
dim(data)
typeof(data[,3])
typeof(data[,2])
typeof(data[,1])
data[,1]
typeof(data[,4])
typeof(data[,5])
head(data[,3])
make_week_dataset <- function(data, num_parking, num_week){
# # Add week number and weekday to group data
# data$LastUpdated_week_hours<-strftime(data$LastUpdated_rounded,format="%w.%H:%M")
# data$LastUpdated_week<-strftime(as.POSIXlt(data$LastUpdated, tz = "Europe/Amsterdam"),format="%W")
#
# grouped_data=group_by(data,SystemCodeNumber,LastUpdated_week, LastUpdated_week_hours)
# grouped_data <- grouped_data %>% summarise(
#   Occupancy = sum(Occupancy)
# )
# final_matrix <- dcast(grouped_data, SystemCodeNumber + LastUpdated_week ~ LastUpdated_week_hours, value.var = "Occupancy")
# #final_matrix[1,]
final_matrix <- matrix(data[,3], nrow = num_parking*num_week, byrow = FALSE)
return(final_matrix)
}
temp <- make_week_dataset(data, 28, 11)
temp[1,]
make_week_dataset <- function(data, num_parking, num_week){
# # Add week number and weekday to group data
# data$LastUpdated_week_hours<-strftime(data$LastUpdated_rounded,format="%w.%H:%M")
# data$LastUpdated_week<-strftime(as.POSIXlt(data$LastUpdated, tz = "Europe/Amsterdam"),format="%W")
#
# grouped_data=group_by(data,SystemCodeNumber,LastUpdated_week, LastUpdated_week_hours)
# grouped_data <- grouped_data %>% summarise(
#   Occupancy = sum(Occupancy)
# )
# final_matrix <- dcast(grouped_data, SystemCodeNumber + LastUpdated_week ~ LastUpdated_week_hours, value.var = "Occupancy")
# #final_matrix[1,]
final_matrix <- matrix(data[,3], nrow = num_parking*num_week, byrow = TRUE)
return(final_matrix)
}
temp <- make_week_dataset(data, 28, 11)
temp[1,]
head(data[,3])
make_week_dataset <- function(data, num_parking=28, num_week=11){
# # Add week number and weekday to group data
# data$LastUpdated_week_hours<-strftime(data$LastUpdated_rounded,format="%w.%H:%M")
# data$LastUpdated_week<-strftime(as.POSIXlt(data$LastUpdated, tz = "Europe/Amsterdam"),format="%W")
#
# grouped_data=group_by(data,SystemCodeNumber,LastUpdated_week, LastUpdated_week_hours)
# grouped_data <- grouped_data %>% summarise(
#   Occupancy = sum(Occupancy)
# )
# final_matrix <- dcast(grouped_data, SystemCodeNumber + LastUpdated_week ~ LastUpdated_week_hours, value.var = "Occupancy")
# #final_matrix[1,]
final_matrix <- matrix(data[,3], nrow = num_parking*num_week, byrow = TRUE)
return(final_matrix)
}
make_week_dataset(data)
week_data <- make_week_dataset(data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("util.R")
source("data_cleaning.R")
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("util.R")
source("data_cleaning.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("util.R")
source("data_cleaning.R")
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
source("data_cleaning.R")
week_data <- make_week_dataset(data)
day_data <- make_day_dataset(data)
dim(week_data)
dim(day_data)
28*77
unique(data[,1])
length(unique(data[,1]))
rep(unique(data[,1]), 10)
rep(unique(data[,1]), rep(10, length(unique(data[,1]))))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("util.R")
source("data_cleaning.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("util.R")
source("data_cleaning.R")
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
week_data <- make_week_dataset(data)
week_label <- make_week_label(data)
day_data <- make_day_dataset(data)
day_label <- make_day_label(data)
library(FactoMineR)
library(factoextra)
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
warnings()
resPCA <- PCA(day_data)
fviz_pca_ind(resPCA, col.ind = as.factor(day_label), label = "none", addEllipses = TRUE)
park_data <- make_parking_dataset(data)
park_label <- make_parking_label(data)
park_data <- make_parking_dataset(data)
park_label <- make_parking_label(data)
resPCA <- PCA(park_data)
fviz_pca_ind(resPCA, col.ind = as.factor(park_label), label = "none", addEllipses = TRUE)
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
resPCA <- PCA(week_data)
warnings()
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
dim(park_data)
warning()
warnings()
dim(park_data)
boxplot(week_data)
boxplot(day_data)
boxplot(week_data)
boxplot(park_data)
boxplot(week_data)
boxplot(day_data)
?scale
boxplot(scale(day_data))
boxplot(day_data)
boxplot(week_data)
boxplot(t(park_data))
boxplot(day_data)
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour")
boxplot(weed_data, ylab = "Occupation")
boxplot(weed_data, ylab = "Occupation")
boxplot(week_data, ylab = "Occupation")
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
layout(1:3)
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(week_data, ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation")
layout(t(1:3))
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(week_data, ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation")
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
dev.off()
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab = "Occupation")
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation")
boxplot(t(scale(park_data)), ylab = "Occupation")
boxplot(t(scale(park_data)), ylab = "Occupation")
?scale
boxplot(scale(t(park_data)), ylab = "Occupation")
boxplot(scale(day_data), main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(t(scale(t(day_data))), main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(day_data), main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
week_data <- make_week_dataset(data)
week_label <- make_week_label(data)
res_kmeans <- kmeans(week_data, nstart = 50)
res_kmeans <- kmeans(week_data, k = 5, nstart = 50)
res_kmeans <- kmeans(week_data, 5, nstart = 50)
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(res_kmeans$cluster), label = "none", addEllipses = TRUE)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
fviz_pca_ind(resPCA, col.ind = as.factor(res_kmeans$cluster), label = "none", addEllipses = TRUE)
resPCA <- PCA(week_data)
resPCA
resPCA$call
resPCA
resPCA$var$contrib
dim(resPCA$var$contrib)
dim(resPCA$var$contrib
)
resPCA$var$contrib
resPCA
resPCA$var$cor
resPCA$var$cor[,2]
plot(resPCA$var$cor[,2])
fviz_pca_ind(resPCA, col.ind = as.factor(res_kmeans$cluster), label = "none", addEllipses = TRUE)
norm_vec <- function(x) sqrt(sum(x^2))
week_data
dim(week_data)
norm_vec(week_data)
dim(apply(week_data, MARGIN = 1, FUN = norm_vec))
norm_vec <- function(x) x/sqrt(sum(x^2))
dim(norm_vec(week_data))
norm_vec(week_data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
week_data <- make_week_dataset(data)
week_label <- make_week_label(data)
day_data <- make_day_dataset(data)
day_label <- make_day_label(data)
park_data <- make_parking_dataset(data)
park_label <- make_parking_label(data)
write.csv("week_dataset.csv", week_data)
?write.csv
write.csv(week_data, "week_dataset.csv")
write.csv(data, "cleaned_dataset.csv")
write.csv(day_data, "day_dataset.csv")
write.csv(park_data, "parking_dataset.csv")
write.csv(day_label, "day_dataset_label.csv")
write.csv(week_label, "week_dataset_label.csv")
write.csv(park_label, "parking_dataset_label.csv")
week_data
week_data <- read.csv("../Datasets/week_dataset.csv")
dim(week_data)
head(week_data)
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_data
dim(week_data)
28*11
week_label <- read.csv("../Datasets/week_dataset_label.csv.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
week_label
dim(week_label)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
week_data <- apply(week_data, MARGIN = 1, FUN = norm_vec)
dim(week_data)
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
dim(week_data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
week_data <- apply(week_data, MARGIN = 1, FUN = norm_vec)
dim(week_data)
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
norm_vec(week_data)
dim(norm_vec(week_data))
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_data[1,]
dim(week_data[1,])
norm_vec(week_data[1,])
dim(norm_vec(week_data[1,]))
norm_vec <- function(x) x/sqrt(sum(x^2))
dim(norm_vec(week_data[1,]))
dim(apply(week_data, MARGIN = 1, FUN = norm_vec))
?apply
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
dim(week_data)
week_data <- norm_mat(week_data)
dim(week_data)
boxplot(week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab = "Occupation")
day_data <- norm_mat(day_data)
boxplot(day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(scale(t(park_data)), ylab = "Occupation")
park_data <- norm_mat(park_data)
boxplot(park_data, ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation")
day_data <- norm_mat(day_data)
week_data <- norm_mat(week_data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
norm_day_data <- norm_mat(day_data)
norm_week_data <- norm_mat(week_data)
norm_park_data <- norm_mat(park_data)
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
axis(1, at=1:5, labels=c("Min", "Max", "Avg", "Ward", "kMeans"))
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation")
as.character(seq(as.Date("8:00:00"), as.Date("17:00:00"), by="hour"))
as.Date("17:00:00")
as.POSIXlt("17:00:00")
as.POSIXlt("17:00:00", format="%H:%M:%S")
8:17
8:16
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab = "Occupation", xaxt = "n")
1:18
1:18:2
seq(1,18,2)
axis(1, at=seq(1,18,2), labels=8:16)
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab="Occupation", xaxt="n", xlab="Hour")
boxplot(norm_day_data, main = "Boxplot pour chaque mesure de chaque jour", ylab="Occupation", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
norm_day_data <- norm_mat(day_data)
norm_week_data <- norm_mat(week_data)
norm_park_data <- norm_mat(park_data)
boxplot(norm_week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab = "Occupation")
boxplot(norm_week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab="Occupation", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("Lundi", "Mardi", "Jeudi", "Vendredi", "Samedi", "Dimanche"))
axis(1, at=seq(1,126,18), labels=c("Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"))
axis(1, at=seq(1,126,18), labels=c("   Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"))
boxplot(norm_week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab="Occupation", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("   Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"))
boxplot(norm_week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab="Occupation", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche", "Lundi"), )
boxplot(norm_week_data, main = "Boxplot pour chaque mesure de chaque semaine", ylab="Occupation", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("       Mardi", "       Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche", "Lundi"), )
boxplot(norm_day_data, ylab="Occupation normalisée", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
boxplot(norm_week_data, ylab="Occupation normalisée", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche", "Lundi"), )
corrplot::corrplot(corr(t(park_data)))
corrplot::corrplot(cor(t(park_data)))
cor(t(park_data))
corrplot::corrplot(cor(t(park_data)), type= "upper")
corrplot::corrplot(dist(park_data), type= "upper")
dist(park_data)
dim(dist(park_data))
lengt(dist(park_data))
length(dist(park_data))
28*28
/2
784/2
resPCA <- PCA(park_data)
fviz_pca_ind(resPCA, col.ind = as.factor(park_label), label = "none", addEllipses = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
norm_day_data <- norm_mat(day_data)
norm_week_data <- norm_mat(week_data)
norm_park_data <- norm_mat(park_data)
boxplot(norm_day_data, ylab="Occupation normalisée", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
boxplot(norm_week_data, ylab="Occupation normalisée", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche", "Lundi"), )
boxplot(t(norm_park_data), ylab = "Occupation")
corrplot::corrplot(cor(t(park_data)), type= "upper")
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
dim(week_data)
is.na(week_data)
sum(is.na(week_data))
sum(is.null(week_data))
week_label
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(week_label), label = "none", addEllipses = TRUE)
resPCA <- PCA(day_data)
fviz_pca_ind(resPCA, col.ind = as.factor(day_label), label = "none", addEllipses = TRUE)
as.factor(week_label)
as.factor(as.Vector(week_label))
as.vector(week_label)
list(week_label)
unlist(week_label)
length(unlist(week_label))
resPCA <- PCA(week_data)
fviz_pca_ind(resPCA, col.ind = as.factor(unlist(week_label)), label = "none", addEllipses = TRUE)
resPCA <- PCA(day_data)
fviz_pca_ind(resPCA, col.ind = as.factor(unlist(day_label)), label = "none", addEllipses = TRUE)
resPCA <- PCA(park_data)
fviz_pca_ind(resPCA, col.ind = as.factor(unlist(park_label)), label = "none", addEllipses = TRUE)
fviz_pca_var(resPCA, label = "none", addEllipses = TRUE)
dim(day_data)
dim(week_data)
11*28*7
resPCA <- PCA(t(day_data))
fviz_pca_ind(resPCA, col.ind = as.factor(rep(1:7, 11*28)), label = "none", addEllipses = TRUE)
resPCA <- PCA(day_data)
fviz_pca_ind(resPCA, col.ind = as.factor(rep(1:7, 11*28)), label = "none", addEllipses = TRUE)
summary(park_data)
dim(park_data)
summary(t(park_data))
boxplot(t(norm_park_data), ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation")
corrplot::corrplot(cor(t(park_data)), type= "upper")
