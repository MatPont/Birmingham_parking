library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(kohonen)
library(mclust)
source("util.R")
source("inertia.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
size <- 10
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_week_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
convert_cluster <- function(som_cluster, cluster){
for(i in 1:length(som_cluster)){
for(y in unique(cluster)){
if(som_cluster[i] %in% which(cluster == y)){
som_cluster[i] <- y
break
}
}
}
return(som_cluster)
}
layout(matrix(c(1,4,2,3), nrow=2))
plot_charge_week(norm_week_data, convert_cluster(res_som$unit.classif, res_kmeans$cluster), "Occupation normalisée")
dev.off()
layout(matrix(c(1,4,2,3), nrow=2))
plot_charge_week(norm_week_data, convert_cluster(res_som$unit.classif, res_kmeans$cluster), "Occupation normalisée")
week_label
summary(week_label)
week_label[res_kmeans$cluster == 1]
week_label[res_kmeans$cluster == 1,]
unique(week_label[res_kmeans$cluster == 1,])
unique(week_label[res_kmeans$cluster == 2,])
summary(res_kmeans$cluster)
for(y in unique(res_kmeans$cluster)){
print(unique(week_label[res_kmeans$cluster == 1,]) )
}
summary(as.matrix(res_kmeans$cluster))
as.matrix(res_kmeans$cluster)
summary(as.matrix(label))
label <- convert_cluster(res_som$unit.classif, res_kmeans$cluster)
dim(label)
length(label)
length(res_kmeans$cluster)
length(res_som$unit.classif)
for(y in unique(label)){
print(unique(week_label[label == y,]) )
}
for(y in unique(label)){
print(unique(week_label[label == y,]))
print(length(unique(week_label[label == y,])))
print(length(week_label[label == y,]))
}
for(y in unique(label)){
print("======================")
print(unique(week_label[label == y,]))
print(length(unique(week_label[label == y,])))
print(length(week_label[label == y,]))
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
########################################################
# Normalization
########################################################
norm_week_data <- norm_dataset(week_data)
norm_day_data <- norm_dataset(day_data)
norm_park_data <- norm_dataset(park_data)
chi_week_data <- norm_chi_2(norm_week_data)
chi_day_data <- norm_chi_2(norm_day_data)
chi_park_data <- norm_chi_2(norm_park_data)
########################################################
# Box plot
########################################################
boxplot(norm_day_data, ylab="Occupation normalisée", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
dev.off()
########################################################
# Box plot
########################################################
boxplot(norm_day_data, ylab="Occupation normalisée", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
boxplot(norm_week_data, ylab="Occupation normalisée", xaxt="n", xlab="Jour")
axis(1, at=seq(1,126,18), labels=c("Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche", "Lundi"), )
boxplot(t(norm_park_data), ylab = "Occupation")
boxplot(t(park_data), ylab = "Occupation", )
boxplot(t(norm_park_data), ylab = "Occupation")
layout(1:2)
corrplot::corrplot(cor(t(park_data)), type= "upper", order = "hclust")
corrplot::corrplot(cor(t(norm_park_data)), type= "upper", order = "hclust")
t_norm_park_data <- t(norm_park_data)
median_order <- order(apply(t_norm_park_data, MARGIN=2, FUN=median))
par(mar=c(10,5,3,3)) # left margin space
boxplot(t_norm_park_data[, median_order], ylab="Occupation normalisée", names=park_names[median_order], las=2)
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
park_names <- unique(data[,1])
par(mar=c(10,5,3,3)) # left margin space
boxplot(t_norm_park_data[, median_order], ylab="Occupation normalisée", names=park_names[median_order], las=2)
dev.off()
par(mar=c(10,5,3,3)) # left margin space
boxplot(t_norm_park_data[, median_order], ylab="Occupation normalisée", names=park_names[median_order], las=2)
capacities=unlist(read.csv("../Datasets/capacities.csv", row.names = 1))
par(mar=c(2,5,2,2)) # left margin space
barplot(capacities[median_order], las=2, xaxt="n")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TSdist)
library(TSclust)
library(cluster)
library(NbClust)
source("util.R")
source("data_cleaning.R")
source("inertia.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
#res_nbclust <- NbClust(norm_week_data, method = "kmeans", min.nc=2, max.nc=6, index="alllong")
res_nbclust <- NbClust(norm_week_data, method = "kmeans", min.nc=2, max.nc=6)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(kohonen)
library(mclust)
source("util.R")
source("inertia.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
size <- 10
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_week_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
convert_cluster <- function(som_cluster, cluster){
for(i in 1:length(som_cluster)){
for(y in unique(cluster)){
if(som_cluster[i] %in% which(cluster == y)){
som_cluster[i] <- y
break
}
}
}
return(som_cluster)
}
dev.off()
layout(matrix(c(1,4,2,3), nrow=2))
label <- convert_cluster(res_som$unit.classif, res_kmeans$cluster)
plot_charge_week(norm_week_data, label, "Occupation normalisée")
for(y in unique(label)){
print("======================")
print(unique(week_label[label == y,]))
print(length(unique(week_label[label == y,])))
print(length(week_label[label == y,]))
}
res_som$unit.classif
res_som$unit.classif[1]
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
norm_park_data <- norm_dataset(park_data)
chi_park_data <- norm_chi_2(norm_park_data)
size <- 3
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
dev.off()
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
size <- 5
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
size <- 5
k <- 3
seed <- 11
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
seed <- 8
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
seed <- 7
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
tricolor(res_som)
?tricolor
tricolor(res_som$grid)
temp <- tricolor(res_som$grid)
plot(res_som, shape="straight", bgcol=temp)
plot(res_som, shape="straight", bgcol=rgb(temp))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(kohonen)
library(mclust)
source("util.R")
source("inertia.R")
# Combine som clustering and a clustering on som to produce final clustering
convert_cluster <- function(som_cluster, cluster){
for(i in 1:length(som_cluster)){
for(y in unique(cluster)){
if(som_cluster[i] %in% which(cluster == y)){
som_cluster[i] <- y
break
}
}
}
return(som_cluster)
}
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
size <- 10
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_week_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
plot(res_som,type="codes")
plot(res_som,type="changes")
plot(res_som,type="counts") # qualité de représentation
plot(res_som,type="dist.neighbours")
plot(res_som,type="mapping")
plot(res_som,type="dist.neighbours")
plot(res_som,type="mapping")
plot(res_som,type="property")
plot(res_som,type="quality")  # qualité de représentation
plot(res_som,type="counts", palette.name = degrade.bleu)
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
add.cluster.boundaries(res_som, label, lwd = 3)
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
add.cluster.boundaries(res_som, label, lwd = 4)
par(bg=NA)
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
add.cluster.boundaries(res_som, label, lwd = 4)
par(bg=NA)
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
#par(bg=NA)
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
dev.off()
#par(bg=NA)
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
layout(matrix(1:2, nrow=1))
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
add.cluster.boundaries(res_som, label, lwd = 4)
layout(matrix(1:2, nrow=1))
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
plot(res_som,type="counts", palette.name = degrade.bleu, shape="straight")
dev.off()
set.seed(seed)
res_som = som(chi_park_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
size <- 10
k <- 4
seed <- 11
set.seed(seed)
res_som = som(chi_week_data, grid = somgrid(size, size, "hexagonal"), rlen=1000)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
res_kmeans <- kmeans(getCodes(res_som), k, nstart=50)
label <- res_kmeans$cluster
plot(res_som, shape="straight", bgcol=MYCOLOR[label])
add.cluster.boundaries(res_som, label, lwd = 3)
