hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(kohonen)
source("util.R")
source("inertia.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=1000)
res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
plot(res_som)
dim(res_som$unit.classif)
res_som$unit.classif
res_som$distances
res_som$changes
dim(res_som$changes)
?som
res_som$codes
dim(res_som$codes)
length(res_som$codes)
res_som$codes
getCodes(res_som)
dim(getCodes(res_som))
mean(res_som$distances)
withins <- c()
for(i in 2:10){
res_som = som(chi_week_data, grid = somgrid(i, i, "rectangular"), rlen=500)
withins <- c(withins, mean(res_som$distances))
}
withins <- c()
for(i in 2:10){
print(i)
res_som = som(chi_week_data, grid = somgrid(i, i, "rectangular"), rlen=500)
withins <- c(withins, mean(res_som$distances))
}
plot(withins)
dev.off()
plot(withins)
plot(withins, type="b")
?somgrid
withins2 <- withins
plot(withins2, type="b")
withins <- c()
for(i in 2:10){
print(i)
res_som = som(chi_week_data, grid = somgrid(i, i, "hexagonal"), rlen=500)
withins <- c(withins, mean(res_som$distances))
}
plot(withins, type="b")
plot(withins2, type="b")
plot(withins, type="b")
plot(withins2, type="b")
plot(withins, type="b")
i <- 4
res_som = som(chi_week_data, grid = somgrid(i, i, "hexagonal"), rlen=500)
plot(res_som)
i <- 10
plot(res_som)
res_som = som(chi_week_data, grid = somgrid(i, i, "hexagonal"), rlen=500)
plot(res_som)
res_som2 = som(chi_week_data, grid = somgrid(4, 4, "hexagonal"), rlen=500)
layout(1:2)
plot(res_som)
plot(res_som2)
res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
plot(res_som)
dev.off()
plot(res_som)
res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
plot(res_som)
res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
res_som2 = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
layout(1:2)
plot(res_som)
plot(res_som2)
res_som2 = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
layout(1:2)
plot(res_som)
plot(res_som2)
#res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
dev.off()
res_som = som(norm_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
plot(res_som)
?KMedoids
library(TSdist)
library(TSclust)
?KMedoids
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(FactoMineR)
library(factoextra)
source("util.R")
source("data_cleaning.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
day_data <- read.csv("../Datasets/day_dataset.csv", row.names = 1)
day_label <- read.csv("../Datasets/day_dataset_label.csv", row.names = 1)
park_data <- read.csv("../Datasets/parking_dataset.csv", row.names = 1)
park_label <- read.csv("../Datasets/parking_dataset_label.csv", row.names = 1)
########################################################
# Normalization
########################################################
norm_day_data <- norm_mat(day_data)
norm_week_data <- norm_mat(week_data)
norm_park_data <- norm_mat(park_data)
########################################################
# Normalization
########################################################
norm_week_data <- norm_dataset(week_data)
norm_day_data <- norm_dataset(day_data)
norm_park_data <- norm_dataset(park_data)
chi_week_data <- norm_chi_2(norm_week_data)
chi_day_data <- norm_chi_2(norm_day_data)
chi_park_data <- norm_chi_2(norm_park_data)
res_CA <- CA(chi_park_data)
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
data <- data_cleaning(data)
park_names <- unique(data[,1])
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE)
########################################################
# Correspondance Analysis
########################################################
res_CA <- CA(norm_park_data)
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE)
res_CA <- CA(chi_day_data)
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE)
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
fviz_ca_row(res_CA, label = "none", addEllipses = TRUE)
#fviz_ca_row(res_CA, label = "none", col.row = labelK, addEllipses = TRUE, xlim=c(-0.5, 0.5), ylim=c(-1.5, 1.5))
day_park_names <- rep(park_names, rep(dim(day_data)[1]/length(park_names), length(park_names)))
dim(day_park_names)
lengt(day_park_names)
length(day_park_names)
fviz_ca_row(res_CA, label = "none", col.row = as.factor(day_park_names), addEllipses = TRUE)
res_CA <- CA(norm_day_data)
fviz_ca_row(res_CA, label = "none", col.row = as.factor(day_park_names), addEllipses = TRUE)
res_CA <- CA(chi_week_data)
week_park_names <- rep(park_names, rep(dim(week_data)[1]/length(park_names), length(park_names)))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(week_park_names), addEllipses = TRUE)
res_CA <- CA(chi_park_data)
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), addEllipses = TRUE)
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), pch=1:length(park_names))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), lty=1:length(park_names))
fviz_ca_row(res_CA, label = "none", col.row = as.factor(park_names), pch=1:length(park_names))
fviz_ca_row(res_CA, col.row = as.factor(park_names))
fviz_ca_row(res_CA, label = park_names, col.row = as.factor(park_names))
fviz_ca_row(res_CA, label = park_names)
fviz_ca_row(res_CA, label = park_names, col.row = as.factor(park_names))
fviz_ca_col(res_CA, label)
fviz_ca_col(res_CA)
fviz_ca_col(res_CA, label="none")
fviz_ca_col(res_CA)
?fviz_ca_row
row.names(chi_park_data)
row.names(chi_park_data) <- park_names
row.names(chi_park_data)
########################################################
# Correspondance Analysis
########################################################
row.names(chi_park_data) <- park_names
res_CA <- CA(chi_park_data)
fviz_ca_row(res_CA, col.row = as.factor(park_names))
par(mar=c(10,5,3,3)) # left margin space
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue2"))
# Count number of lines for each parking
names <- c()
numbers <- c()
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
names <- c(names, i)
numbers <- c(numbers, sum(data[,1] == i))
}
names(numbers) <- names
par(mar=c(10,5,3,3)) # left margin space
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue2"))
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
# Count number of lines for each parking
names <- c()
numbers <- c()
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
names <- c(names, i)
numbers <- c(numbers, sum(data[,1] == i))
}
names(numbers) <- names
par(mar=c(10,5,3,3)) # left margin space
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue2"))
########################################################
# Box plot
########################################################
boxplot(norm_day_data, ylab="Occupation normalisÃ©e", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
dev.off()
########################################################
# Box plot
########################################################
boxplot(norm_day_data, ylab="Occupation normalisÃ©e", xaxt="n", xlab="Heure")
axis(1, at=seq(1,18,2), labels=8:16)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(kohonen)
source("util.R")
source("inertia.R")
week_data <- read.csv("../Datasets/week_dataset.csv", row.names = 1)
week_label <- read.csv("../Datasets/week_dataset_label.csv", row.names = 1)
norm_week_data <- norm_dataset(week_data)
chi_week_data <- norm_chi_2(norm_week_data)
#res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
plot(res_som)
res_kmeans <- kmeans(getCodes(res_som), 3)
plot(res_som, bgcol=res_kmeans$cluster)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, bgcol=res_kmeans$cluster)
?som
?som
plot(res_som, bgcol=res_kmeans$cluster, shape="straight")
?som
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", codeRendering="lines")
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", codeRendering="segment")
?som
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", codeRendering="segments")
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", codeRendering="stars")
plot(res_som, bgcol=res_kmeans$cluster, shape="straight")
?plot.kohonen
coolBlueHotRed = function(n, alpha = 1){
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", palette.name = coolBlueHotRed)
coolBlueHotRed = function(n, alpha = 1){
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
plot(res_som, bgcol=res_kmeans$cluster, shape="straight", palette.name = coolBlueHotRed)
unique(res_kmeans$cluster)
plot(res_som, bgcol=res_kmeans$cluster+5, shape="straight")
plot(res_som, bgcol=res_kmeans$cluster+6, shape="straight")
plot(res_som, bgcol=res_kmeans$cluster+1, shape="straight")
plot(res_som, bgcol=res_kmeans$cluster+2, shape="straight")
?plot.kohonen
plot(res_som, bgcol=res_kmeans$cluster+2, shape="straight", col = as.integer(vintages))
plot(res_som, bgcol=res_kmeans$cluster+2, shape="straight", col = res_kmeans$cluster)
plot(res_som, shape="straight", col = res_kmeans$cluster)
plot(res_som, shape="straight", col = "blue")
plot(res_som, shape="straight")
plot(res_som,type="mapping")
plot(res_som, shape="straight", bgcol=res_kmeans$cluster+2)
add.cluster.boundaries(res_som, res_kmeans$cluster)
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna1","yellowgreen")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna1","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna2","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna3","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna4","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna5","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sienna1","yellowgreen", "gold")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
res_som = som(norm_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
#res_som = som(chi_week_data, grid = somgrid(10, 10, "rectangular"), rlen=500)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster)
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(norm_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "orchid")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_kmeans <- kmeans(getCodes(res_som), 5)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "orchid")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "orchid1")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum")[res_kmeans$cluster])
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 5)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=2000)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=2000)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
?som
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
# U-matrix (matrice de voisinage)
plot(res_som, type="dist.neighbours")
View(make_day_dataset)
coolBlueHotRed = function(n, alpha = 1){
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
# U-matrix (matrice de voisinage)
plot(res_som, type="dist.neighbours", palette.name = coolBlueHotRed)
# Count plot
plot(carte,type="count",palette.name=degrade.bleu)
# Count plot
plot(res_som, type="count", palette.name=degrade.bleu)
source("util.R")
# Count plot
plot(res_som, type="count", palette.name=degrade.bleu)
# U-matrix (matrice de voisinage)
plot(res_som, type="dist.neighbours", palette.name = coolBlueHotRed)
# Basic plot
res_kmeans <- kmeans(getCodes(res_som), 4)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(20, 20, "hexagonal"), rlen=500)
20*20
dim(chi_week_data)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
plot(withins, type="b")
dev.off()
plot(withins, type="b")
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
plot(withins, type="b")
res_kmeans <- kmeans(getCodes(res_som), 5)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
plot(withins, type="b")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=50)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
res_kmeans <- kmeans(getCodes(res_som), 5)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=50)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=50)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
res_kmeans <- kmeans(getCodes(res_som), 2)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=500)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=1000)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=50)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
NbClust::NbClust(getCodes(res_som))
NbClust::NbClust(getCodes(res_som), method="kmeans")
NbClust::NbClust(chi_week_data, method = "kmeans")
NbClust::NbClust(norm_week_data, method = "kmeans")
getCodes(res_som)
NbClust::NbClust(getCodes(res_som)*100, method="kmeans")
NbClust::NbClust(getCodes(res_som)*1000, method="kmeans")
getCodes(res_som)*10000
NbClust::NbClust(getCodes(res_som)*10000, method="kmeans")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=50)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=100)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
res_kmeans <- kmeans(getCodes(res_som), 2)
plot(res_som, shape="straight", bgcol=c("steelblue1","sandybrown","yellowgreen", "gold", "plum1")[res_kmeans$cluster])
add.cluster.boundaries(res_som, res_kmeans$cluster, lwd = 3)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=1000)
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=1000)
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i, nstart=100)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
# Basic plot
withins <- c()
for(i in 2:10){
print(i)
res_kmeans = kmeans(getCodes(res_som), i)
withins <- c(withins, res_kmeans$tot.withinss)
}
dev.off()
plot(withins, type="b")
?som
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=1000, type="batch")
res_som = som(chi_week_data, grid = somgrid(10, 10, "hexagonal"), rlen=1000, type="pbatch")
