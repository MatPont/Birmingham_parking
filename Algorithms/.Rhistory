library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(lubridate)
source("util.R")
# After the round of the dates some of them are equals (eg: 7h50 and 8h10 will be round to 8h)
# This function fix this problem by keeping the one with the original date closest to the rounded one
remove_dates_close <- function(data){
row_to_delete <- c()
for(i in 2:(length(data[, 5])-1)){
rounded_date_1 = data[i, 5]
rounded_date_2 = data[i+1, 5]
if(data[i, 1] == data[i+1, 1] && rounded_date_1 == rounded_date_2){
# Check closest date to the rounded one to keep it
if(abs(rounded_date_1$min - data[i, 5]$min) < abs(rounded_date_1$min - data[i+1, 5]$min)){
row_to_delete <- c(row_to_delete, i)
}else{
row_to_delete <- c(row_to_delete, (i+1))
}
}
}
data <- data[-row_to_delete, ]
return(data)
}
# After the round of the dates some of them equals 7h30 but we want to start at 8h
# This function fix this problem by replacing 7h30 with 8h if the measure corresponding of 8h is missing
fix_first_measure_of_day <- function(data){
row_to_delete <- c()
rownames(data) <- 1:dim(data)[1]
temp <- as.numeric(rownames(data[(data[,5]$min == 30) & (data[,5]$hour == 7),]))
temp2 <- as.numeric(rownames(data[(data[,5]$min == 30) & (data[,5]$hour == 7),]))+1
for(i in 1:length(temp)){
idx <- temp[i]
idx2 <- temp2[i]
if( ! (data[idx2,5]$hour == 8 & data[idx2,5]$min == 0)){
data[idx,5] <- data[idx,5] + 30*60
}else{
row_to_delete <- c(row_to_delete, idx)
}
}
data <- data[-row_to_delete, ]
return(data)
}
# Full data cleaning pipeline
data_cleaning <- function(data){
# Remove parking with too few samples
data <- data[data[,1] != "BHMBRTARC01", ]
data <- data[data[,1] != "NIA North", ]
# Remove duplicates
data <- unique(data)
# Round dates
data$LastUpdated <- as.POSIXlt(data$LastUpdated, tz = "Europe/Amsterdam")
data$LastUpdated_rounded <- round_date(data$LastUpdated,'30 minute')
# Remove duplicates after round
data <- remove_dates_close(data)
# Manage 7h30 measures
data <- fix_first_measure_of_day(data)
# Fill missing values
# TODO
rownames(data) <- 1:dim(data)[1]
return(data)
}
data <- read.table("../Datasets/dataset.csv", sep=",", header = TRUE)
colnames(data)
t <- c(c("oui", 5), c("non", 4))
t
dim(t)
length(t)
plot(t)
barplot(t)
# Count number of lines for each parking
numbers <- c()
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
numbers <- c(numbers, sum(data[,1] == i))
}
# Count number of lines for each parking
names <- c()
numbers <- c()
for(i in unique(data[,1])){
print(i)
print(sum(data[,1] == i))
names <- c(names, i)
numbers <- c(numbers, sum(data[,1] == i))
}
plot(numbers)
barplot(numbers)
barplot(numbers, xlab = names)
names(numbers) <- names
barplot(numbers)
barplot(numbers, las=2)
barplot(numbers, las=1)
barplot(numbers, las=3)
barplot(numbers, las=4)
barplot(numbers, las=3)
?barplot
barplot(numbers, las=3, offset = 5)
barplot(numbers, las=3, offset = 10)
barplot(numbers, las=3, offset = 20)
barplot(numbers, las=3, offset = 200)
barplot(numbers, las=3)
par(mar=c(0,0,0,0)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,5,5)) # left margin space
barplot(numbers, las=2)
barplot(numbers, las=2)
dev.off()
barplot(numbers, las=2)
par(mar=c(5,5,5,5)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,0,0,0)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,0,0)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,5,0)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,3,10)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,3,3,3)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,3,3)) # left margin space
barplot(numbers, las=2)
par(mar=c(5,5,3,5)) # left margin space
barplot(numbers, las=2)
par(mar=c(10,5,3,3)) # left margin space
barplot(numbers, las=2)
1300*
30
barplot(numbers, las=2, col = 1:length(numbers))
barplot(numbers, las=2, col = rainbox(length(numbers)))
barplot(numbers, las=2, col = rainbow(length(numbers)))
barplot(numbers, las=2, col = topo.colors(length(numbers)))
barplot(numbers, las=2, col = cm.colors(length(numbers)))
rainbow
barplot(numbers, las=2, col = rainbow(length(numbers)))
barplot(numbers, las=2, col = rainbow(numbers))
barplot(numbers, las=2, col = rainbow(length(numbers)))
barplot(numbers, las=2, col = heat.colors(length(numbers)))
barplot(numbers, las=2, col = topo.colors(length(numbers)))
rainbow(5)
rainbow(6)
rainbow(numbers)
dim(rainbow(numbers))
length(rainbow(numbers))
numbers
library(ggplot2)
bar <- ggplot(data = df, aes(x = factor(dat, levels = month.abb), y = val,
fill=val)) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low=LtoM(100), mid='snow3',
high=MtoH(100), space='Lab')
bar <- ggplot(data = data, aes(x = factor(dat, levels = month.abb), y = val,
fill=val)) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low=LtoM(100), mid='snow3',
high=MtoH(100), space='Lab')
bar <- ggplot(data = data, aes(x = factor(dat, levels = month.abb), y = val,
fill=val)) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
bar
bar <- ggplot(data = data) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
bar
ggplot(data = data) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
ggplot(data = data, x=parking, y="number of samples") +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
ggplot(data = data, x="parking", y="number of samples") +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
ggplot(data = data, aes(x="parking", y="number of samples")) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", mid='snow3',
high="blue", space='Lab')
ggplot(data = data, aes(x="parking", y="number of samples")) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", high="blue")
ggplot(data = numbers, aes(x="parking", y="number of samples")) +
geom_bar(stat = 'identity') +
scale_fill_gradient2(low="red", high="blue")
ggplot(data = numbers, aes(x="parking", y="number of samples"))
barplot(numbers, las=2, col = topo.colors(length(numbers)))
barplot(numbers, las=2)
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "blue"))
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue1"))
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue"))
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue2"))
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue3"))
barplot(numbers, las=2, col = ifelse(numbers < 1000, "red", "cadetblue2"))
